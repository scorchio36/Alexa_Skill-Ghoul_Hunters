{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyProgramming\\\\ghoul_hunters\\\\Alexa_Skill-Ghoul_Hunters\\\\src\\\\Game.js\";\nimport React from 'react';\nimport Location from './Location.js';\nimport Client from './Client.js';\nimport StartScreen from './StartScreen.js'; // init to null so a variable doesn't have to be created for every new post request\n\nlet http_post_payload = null;\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.locationHelper = new Location();\n    this.clientHelper = new Client();\n    this.state = {\n      location: this.locationHelper.getStartingLocation()\n    };\n    this.updateLocation = this.updateLocation.bind(this);\n  } //ONCLICK: Update the current location in the state when the button is clicked\n\n\n  updateLocation(e) {\n    // cache the next location\n    let next_location = this.locationHelper.getNextLocation(e.target.id); //e.target.id == {NavN, NavE, NavS, NavW} - gets converted to an int in Location class\n\n    this.setState({\n      location: next_location\n    }); // Currently the payloads will only contain the next location of the player.\n\n    http_post_payload = JSON.stringify({\n      location: next_location\n    });\n    /* send a POST request payload with updated location to the local test server\r\n    whenever location is updated. */\n\n    this.clientHelper.sendPOSTRequest(http_post_payload);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(StartScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["D:/MyProgramming/ghoul_hunters/Alexa_Skill-Ghoul_Hunters/src/Game.js"],"names":["React","Location","Client","StartScreen","http_post_payload","Game","Component","constructor","props","locationHelper","clientHelper","state","location","getStartingLocation","updateLocation","bind","e","next_location","getNextLocation","target","id","setState","JSON","stringify","sendPOSTRequest","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,WAAP,MAAwB,kBAAxB,C,CAEA;;AACA,IAAIC,iBAAiB,GAAG,IAAxB;;AAEA,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;AAEjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,cAAL,GAAsB,IAAIR,QAAJ,EAAtB;AACA,SAAKS,YAAL,GAAoB,IAAIR,MAAJ,EAApB;AAEA,SAAKS,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,KAAKH,cAAL,CAAoBI,mBAApB;AADC,KAAb;AAIA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AAED,GAdgC,CAgBjC;;;AACAD,EAAAA,cAAc,CAACE,CAAD,EAAI;AAEhB;AACA,QAAIC,aAAa,GAAG,KAAKR,cAAL,CAAoBS,eAApB,CAAoCF,CAAC,CAACG,MAAF,CAASC,EAA7C,CAApB,CAHgB,CAKhB;;AACA,SAAKC,QAAL,CAAc;AACZT,MAAAA,QAAQ,EAAEK;AADE,KAAd,EANgB,CAUhB;;AACAb,IAAAA,iBAAiB,GAAGkB,IAAI,CAACC,SAAL,CAAe;AACjCX,MAAAA,QAAQ,EAAEK;AADuB,KAAf,CAApB;AAIA;;;AAEA,SAAKP,YAAL,CAAkBc,eAAlB,CAAkCpB,iBAAlC;AACD;;AAEDqB,EAAAA,MAAM,GAAG;AAEP,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADJ;AAUD;;AAjDgC;;AAqDnC,eAAepB,IAAf","sourcesContent":["import React from 'react';\r\nimport Location from './Location.js';\r\nimport Client from './Client.js';\r\nimport StartScreen from './StartScreen.js';\r\n\r\n// init to null so a variable doesn't have to be created for every new post request\r\nlet http_post_payload = null;\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.locationHelper = new Location();\r\n    this.clientHelper = new Client();\r\n\r\n    this.state = {\r\n      location: this.locationHelper.getStartingLocation()\r\n    };\r\n\r\n    this.updateLocation = this.updateLocation.bind(this);\r\n\r\n  }\r\n\r\n  //ONCLICK: Update the current location in the state when the button is clicked\r\n  updateLocation(e) {\r\n\r\n    // cache the next location\r\n    let next_location = this.locationHelper.getNextLocation(e.target.id);\r\n\r\n    //e.target.id == {NavN, NavE, NavS, NavW} - gets converted to an int in Location class\r\n    this.setState({\r\n      location: next_location\r\n    });\r\n\r\n    // Currently the payloads will only contain the next location of the player.\r\n    http_post_payload = JSON.stringify({\r\n      location: next_location\r\n    });\r\n\r\n    /* send a POST request payload with updated location to the local test server\r\n    whenever location is updated. */\r\n    this.clientHelper.sendPOSTRequest(http_post_payload);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <div>\r\n          {/*<h1>Location: {this.state.location}</h1>\r\n          <button onClick={this.updateLocation} id=\"NavN\"> North </button>\r\n          <button onClick={this.updateLocation} id=\"NavE\"> East </button>\r\n          <button onClick={this.updateLocation} id=\"NavS\"> South </button>\r\n          <button onClick={this.updateLocation} id=\"NavW\"> West </button>*/}\r\n          <StartScreen />\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}