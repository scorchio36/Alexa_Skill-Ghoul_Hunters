{"ast":null,"code":"const http = require('http');\n\nlet WebSocket = require('isomorphic-ws'); //isomorphic-ws must be used for WS to work in node/browser\n\n\nconst SERVER_PORT = 8080;\n/* Helper class used to talk to the test server (and eventually the real server).\r\n  This client helper class forms a websockets connection with the test server\r\n  upon creation of the helper class. Messages can be sent once the connection is\r\n  established with the sendMessage function */\n\nclass Client {\n  constructor(hostname) {\n    this.wsClient = new WebSocket(hostname); // Register WS state handlers with the WS client object\n\n    this.wsClient.onerror = handleWS_OnError;\n    this.wsClient.onopen = handleWS_onConnect;\n    this.wsClient.onmessage = handleWS_onMessage;\n    this.wsClient.onclose = handleWS_onClose;\n  }\n\n  sendMessage(message) {\n    this.wsClient.send(message);\n  } // This function sends a generic HTTP GET request to my local test server\n  // Params to be added: path and query (object containing query params)\n\n\n  sendGETRequest() {\n    const options = {\n      hostname: 'localhost',\n      port: SERVER_PORT,\n      path: '/',\n      method: 'GET'\n    };\n    const clientGETReq = http.request(options, function (res) {\n      console.log(`STATUS CODE: ${res.statusCode}`);\n    });\n    clientGETReq.on('error', function (err) {\n      console.log('ERROR:' + err);\n    });\n    clientGETReq.end();\n  } // This function sends a generic HTTP POST request to my local test server\n\n\n  sendPOSTRequest(json_payload) {\n    const options = {\n      hostname: 'localhost',\n      port: 8080,\n      path: '/',\n      method: 'POST'\n    };\n    const clientPOSTReq = http.request(options, function (res) {\n      console.log(`STATUS CODE: ${res.statusCode}`);\n      res.on('data', function (data) {\n        process.stdout.write(data);\n      });\n    });\n    clientPOSTReq.write(json_payload);\n    clientPOSTReq.end();\n    clientPOSTReq.on('error', function (err) {\n      console.log('ERROR:' + err);\n    });\n  }\n\n}\n/* ===== Websockets Handlers ===== */\n\n\nfunction handleWS_OnError(error) {\n  console.log(error);\n}\n\nfunction handleWS_onConnect(connection) {\n  console.log(\"WS Client connected.\");\n}\n\nfunction handleWS_onClose() {\n  console.log(\"WS Client disconnected.\");\n}\n\nfunction handleWS_onMessage(message) {\n  console.log(message);\n}\n\nexport default Client;","map":{"version":3,"sources":["D:/MyProgramming/ghoul_hunters/Alexa_Skill-Ghoul_Hunters/src/Client.js"],"names":["http","require","WebSocket","SERVER_PORT","Client","constructor","hostname","wsClient","onerror","handleWS_OnError","onopen","handleWS_onConnect","onmessage","handleWS_onMessage","onclose","handleWS_onClose","sendMessage","message","send","sendGETRequest","options","port","path","method","clientGETReq","request","res","console","log","statusCode","on","err","end","sendPOSTRequest","json_payload","clientPOSTReq","data","process","stdout","write","error","connection"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,eAAD,CAAvB,C,CAA0C;;;AAC1C,MAAME,WAAW,GAAG,IAApB;AAEA;;;;;AAMA,MAAMC,MAAN,CAAa;AAEXC,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,SAAKC,QAAL,GAAgB,IAAIL,SAAJ,CAAcI,QAAd,CAAhB,CADoB,CAGpB;;AACA,SAAKC,QAAL,CAAcC,OAAd,GAAwBC,gBAAxB;AACA,SAAKF,QAAL,CAAcG,MAAd,GAAuBC,kBAAvB;AACA,SAAKJ,QAAL,CAAcK,SAAd,GAA0BC,kBAA1B;AACA,SAAKN,QAAL,CAAcO,OAAd,GAAwBC,gBAAxB;AACD;;AAEDC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKV,QAAL,CAAcW,IAAd,CAAmBD,OAAnB;AACD,GAdU,CAgBX;AACA;;;AACAE,EAAAA,cAAc,GAAG;AAEf,UAAMC,OAAO,GAAG;AACdd,MAAAA,QAAQ,EAAE,WADI;AAEde,MAAAA,IAAI,EAAElB,WAFQ;AAGdmB,MAAAA,IAAI,EAAE,GAHQ;AAIdC,MAAAA,MAAM,EAAE;AAJM,KAAhB;AAOA,UAAMC,YAAY,GAAGxB,IAAI,CAACyB,OAAL,CAAaL,OAAb,EAAsB,UAASM,GAAT,EAAc;AAEvDC,MAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeF,GAAG,CAACG,UAAW,EAA3C;AAED,KAJoB,CAArB;AAMAL,IAAAA,YAAY,CAACM,EAAb,CAAgB,OAAhB,EAAyB,UAASC,GAAT,EAAc;AACrCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAWG,GAAvB;AACD,KAFD;AAIAP,IAAAA,YAAY,CAACQ,GAAb;AAED,GAvCU,CAyCX;;;AACAC,EAAAA,eAAe,CAACC,YAAD,EAAe;AAE5B,UAAMd,OAAO,GAAG;AACdd,MAAAA,QAAQ,EAAE,WADI;AAEde,MAAAA,IAAI,EAAE,IAFQ;AAGdC,MAAAA,IAAI,EAAE,GAHQ;AAIdC,MAAAA,MAAM,EAAE;AAJM,KAAhB;AAQA,UAAMY,aAAa,GAAGnC,IAAI,CAACyB,OAAL,CAAaL,OAAb,EAAsB,UAASM,GAAT,EAAc;AAExDC,MAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeF,GAAG,CAACG,UAAW,EAA3C;AAEAH,MAAAA,GAAG,CAACI,EAAJ,CAAO,MAAP,EAAe,UAASM,IAAT,EAAe;AAE5BC,QAAAA,OAAO,CAACC,MAAR,CAAeC,KAAf,CAAqBH,IAArB;AACD,OAHD;AAKD,KATqB,CAAtB;AAWAD,IAAAA,aAAa,CAACI,KAAd,CAAoBL,YAApB;AACAC,IAAAA,aAAa,CAACH,GAAd;AAEAG,IAAAA,aAAa,CAACL,EAAd,CAAiB,OAAjB,EAA0B,UAASC,GAAT,EAAc;AACtCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAWG,GAAvB;AACD,KAFD;AAGD;;AArEU;AAyEb;;;AACA,SAAStB,gBAAT,CAA0B+B,KAA1B,EAAiC;AAC/Bb,EAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACD;;AAED,SAAS7B,kBAAT,CAA4B8B,UAA5B,EAAwC;AACtCd,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAED;;AAED,SAASb,gBAAT,GAA4B;AAC1BY,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;;AAED,SAASf,kBAAT,CAA4BI,OAA5B,EAAqC;AACnCU,EAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AACD;;AAED,eAAeb,MAAf","sourcesContent":["const http = require('http');\r\nlet WebSocket = require('isomorphic-ws'); //isomorphic-ws must be used for WS to work in node/browser\r\nconst SERVER_PORT = 8080;\r\n\r\n/* Helper class used to talk to the test server (and eventually the real server).\r\n  This client helper class forms a websockets connection with the test server\r\n  upon creation of the helper class. Messages can be sent once the connection is\r\n  established with the sendMessage function */\r\n\r\n\r\nclass Client {\r\n\r\n  constructor(hostname) {\r\n    this.wsClient = new WebSocket(hostname);\r\n\r\n    // Register WS state handlers with the WS client object\r\n    this.wsClient.onerror = handleWS_OnError;\r\n    this.wsClient.onopen = handleWS_onConnect;\r\n    this.wsClient.onmessage = handleWS_onMessage;\r\n    this.wsClient.onclose = handleWS_onClose;\r\n  }\r\n\r\n  sendMessage(message) {\r\n    this.wsClient.send(message);\r\n  }\r\n\r\n  // This function sends a generic HTTP GET request to my local test server\r\n  // Params to be added: path and query (object containing query params)\r\n  sendGETRequest() {\r\n\r\n    const options = {\r\n      hostname: 'localhost',\r\n      port: SERVER_PORT,\r\n      path: '/',\r\n      method: 'GET'\r\n    };\r\n\r\n    const clientGETReq = http.request(options, function(res) {\r\n\r\n      console.log(`STATUS CODE: ${res.statusCode}`);\r\n\r\n    });\r\n\r\n    clientGETReq.on('error', function(err) {\r\n      console.log('ERROR:' + err);\r\n    });\r\n\r\n    clientGETReq.end();\r\n\r\n  }\r\n\r\n  // This function sends a generic HTTP POST request to my local test server\r\n  sendPOSTRequest(json_payload) {\r\n\r\n    const options = {\r\n      hostname: 'localhost',\r\n      port: 8080,\r\n      path: '/',\r\n      method: 'POST',\r\n\r\n    };\r\n\r\n    const clientPOSTReq = http.request(options, function(res) {\r\n\r\n      console.log(`STATUS CODE: ${res.statusCode}`);\r\n\r\n      res.on('data', function(data) {\r\n\r\n        process.stdout.write(data);\r\n      });\r\n\r\n    });\r\n\r\n    clientPOSTReq.write(json_payload);\r\n    clientPOSTReq.end();\r\n\r\n    clientPOSTReq.on('error', function(err) {\r\n      console.log('ERROR:' + err);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/* ===== Websockets Handlers ===== */\r\nfunction handleWS_OnError(error) {\r\n  console.log(error);\r\n}\r\n\r\nfunction handleWS_onConnect(connection) {\r\n  console.log(\"WS Client connected.\");\r\n\r\n}\r\n\r\nfunction handleWS_onClose() {\r\n  console.log(\"WS Client disconnected.\");\r\n}\r\n\r\nfunction handleWS_onMessage(message) {\r\n  console.log(message);\r\n}\r\n\r\nexport default Client;\r\n"]},"metadata":{},"sourceType":"module"}