{"ast":null,"code":"const http = require('http');\n\nlet WebSocketClient = require('websocket').client;\n\nconst SERVER_PORT = 8080;\n/* Helper class used to talk to the test server (and eventually the real server).\r\nClient will send post and get requests to the server whenever changes occur in the\r\ngame state. Currently the protocol is pure HTTP. However, if time allows, I would\r\nrather use websockets to maintain connections with the server to improve game quality\r\n*/\n\nclass Client {\n  constructor() {\n    this.client = new WebSocketClient(); // Register WS state handlers with the WS client object\n\n    this.client.on('connectFailed', handleWS_OnConnectFailed);\n    this.client.on('connect', handleWS_onConnect);\n  }\n\n  connectToServer(hostname) {\n    this.client.connect(hostname);\n  }\n\n  sendWSMessageToServer(message) {} // This function sends a generic HTTP GET request to my local test server\n  // Params to be added: path and query (object containing query params)\n\n\n  sendGETRequest() {\n    const options = {\n      hostname: 'localhost',\n      port: SERVER_PORT,\n      path: '/',\n      method: 'GET'\n    };\n    const clientGETReq = http.request(options, function (res) {\n      console.log(`STATUS CODE: ${res.statusCode}`);\n    });\n    clientGETReq.on('error', function (err) {\n      console.log('ERROR:' + err);\n    });\n    clientGETReq.end();\n  } // This function sends a generic HTTP POST request to my local test server\n\n\n  sendPOSTRequest(json_payload) {\n    const options = {\n      hostname: 'localhost',\n      port: 8080,\n      path: '/',\n      method: 'POST'\n    };\n    const clientPOSTReq = http.request(options, function (res) {\n      console.log(`STATUS CODE: ${res.statusCode}`);\n      res.on('data', function (data) {\n        process.stdout.write(data);\n      });\n    });\n    clientPOSTReq.write(json_payload);\n    clientPOSTReq.end();\n    clientPOSTReq.on('error', function (err) {\n      console.log('ERROR:' + err);\n    });\n  }\n\n}\n/* ===== Websockets Handlers ===== */\n\n\nfunction handleWS_OnConnectFailed(error) {\n  console.log(error);\n}\n\nfunction handleWS_onConnect(connection) {\n  console.log(\"WS Client connected.\"); // register a message, close, and error handler with the WS client object\n\n  this.client.on('error', handleWS_onMessage);\n  this.client.on('message', handleWS_onMessage);\n  this.client.on('close', handleWS_onClose());\n}\n\nfunction handleWS_onClose() {\n  console.log(\"WS Client disconnected.\");\n}\n\nfunction handleWS_onMessage(message) {\n  console.log(message);\n}\n\nexport default Client;","map":{"version":3,"sources":["D:/MyProgramming/ghoul_hunters/Alexa_Skill-Ghoul_Hunters/src/Client.js"],"names":["http","require","WebSocketClient","client","SERVER_PORT","Client","constructor","on","handleWS_OnConnectFailed","handleWS_onConnect","connectToServer","hostname","connect","sendWSMessageToServer","message","sendGETRequest","options","port","path","method","clientGETReq","request","res","console","log","statusCode","err","end","sendPOSTRequest","json_payload","clientPOSTReq","data","process","stdout","write","error","connection","handleWS_onMessage","handleWS_onClose"],"mappings":"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","sourcesContent":["const http = require('http');\r\nlet WebSocketClient = require('websocket').client;\r\nconst SERVER_PORT = 8080;\r\n\r\n/* Helper class used to talk to the test server (and eventually the real server).\r\nClient will send post and get requests to the server whenever changes occur in the\r\ngame state. Currently the protocol is pure HTTP. However, if time allows, I would\r\nrather use websockets to maintain connections with the server to improve game quality\r\n*/\r\n\r\nclass Client {\r\n\r\n  constructor() {\r\n    this.client = new WebSocketClient();\r\n\r\n    // Register WS state handlers with the WS client object\r\n    this.client.on('connectFailed', handleWS_OnConnectFailed);\r\n    this.client.on('connect', handleWS_onConnect);\r\n  }\r\n\r\n  connectToServer(hostname) {\r\n    this.client.connect(hostname);\r\n  }\r\n\r\n  sendWSMessageToServer(message) {\r\n\r\n  }\r\n\r\n  // This function sends a generic HTTP GET request to my local test server\r\n  // Params to be added: path and query (object containing query params)\r\n  sendGETRequest() {\r\n\r\n    const options = {\r\n      hostname: 'localhost',\r\n      port: SERVER_PORT,\r\n      path: '/',\r\n      method: 'GET'\r\n    };\r\n\r\n    const clientGETReq = http.request(options, function(res) {\r\n\r\n      console.log(`STATUS CODE: ${res.statusCode}`);\r\n\r\n    });\r\n\r\n    clientGETReq.on('error', function(err) {\r\n      console.log('ERROR:' + err);\r\n    });\r\n\r\n    clientGETReq.end();\r\n\r\n  }\r\n\r\n  // This function sends a generic HTTP POST request to my local test server\r\n  sendPOSTRequest(json_payload) {\r\n\r\n    const options = {\r\n      hostname: 'localhost',\r\n      port: 8080,\r\n      path: '/',\r\n      method: 'POST',\r\n\r\n    };\r\n\r\n    const clientPOSTReq = http.request(options, function(res) {\r\n\r\n      console.log(`STATUS CODE: ${res.statusCode}`);\r\n\r\n      res.on('data', function(data) {\r\n\r\n        process.stdout.write(data);\r\n      });\r\n\r\n    });\r\n\r\n    clientPOSTReq.write(json_payload);\r\n    clientPOSTReq.end();\r\n\r\n    clientPOSTReq.on('error', function(err) {\r\n      console.log('ERROR:' + err);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/* ===== Websockets Handlers ===== */\r\nfunction handleWS_OnConnectFailed(error) {\r\n  console.log(error);\r\n}\r\n\r\nfunction handleWS_onConnect(connection) {\r\n  console.log(\"WS Client connected.\");\r\n\r\n  // register a message, close, and error handler with the WS client object\r\n  this.client.on('error', handleWS_onMessage);\r\n  this.client.on('message', handleWS_onMessage);\r\n  this.client.on('close', handleWS_onClose());\r\n}\r\n\r\nfunction handleWS_onClose() {\r\n  console.log(\"WS Client disconnected.\");\r\n}\r\n\r\nfunction handleWS_onMessage(message) {\r\n  console.log(message);\r\n}\r\n\r\nexport default Client;\r\n"]},"metadata":{},"sourceType":"module"}