{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyProgramming\\\\ghoul_hunters\\\\Alexa_Skill-Ghoul_Hunters\\\\src\\\\Game.js\";\nimport React from 'react';\nimport Location from './Location.js';\nimport Client from './Client.js';\nimport StartScreen from './StartScreen.js';\nimport RoomScreen from './RoomScreen.js';\nimport GameScreen from './GameScreen.js';\nimport GameOverScreen from './GameOverScreen.js';\n\nconst uniqid = require('uniqid'); // init to null so a variable doesn't have to be created for every new post request\n\n\nlet http_post_payload = null;\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.locationHelper = new Location();\n    this.clientHelper = new Client(\"ws://localhost:8080\", this);\n    this.treasureHidingSpot = \" \";\n    this.state = {\n      location: this.locationHelper.getStartingLocation(),\n      // user's current location within the mansion\n      clientID: null,\n      // each client will have a unique id created on the server side\n      roomID: null,\n      // the game room that the client is currently in\n      gameOwner: null,\n      // whether or not the client owns the game room\n      userInterface: \"startScreen\",\n      // state variable to keep track of what UI user sees,\n      similarClients: [],\n      // other clients that are in the same room as this client,\n      role: null,\n      playing: false,\n      // player can move around the mansion\n      dead: false,\n      // player has been killed by the ghoul in the game,\n      hasTreasure: false,\n      // is the player currently holding the treasure\n      playerWon: false // tells gameOverScreen if player won the game\n\n    };\n    this.updateLocation = this.updateLocation.bind(this);\n    this.wsClientNewMessageReceivedHandler = this.wsClientNewMessageReceivedHandler.bind(this);\n    this.getCurrentUI = this.getCurrentUI.bind(this);\n    this.handlePlayAgainButtonClicked = this.handlePlayAgainButtonClicked.bind(this);\n    this.handleQuitButtonClicked = this.handleQuitButtonClicked.bind(this);\n  }\n\n  render() {\n    // renders the screen that the client should currently be seeing\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, this.getCurrentUI());\n  } //ONCLICK: Update the current location in the state when the button is clicked\n\n\n  updateLocation(e) {\n    // cache the next location\n    //e.target.id == {NavN, NavE, NavS, NavW} - gets converted to an int in Location class\n    let next_location = this.locationHelper.getNextLocation(e.target.id); // change the location of the client\n\n    this.setState({ ...this.state,\n      location: next_location\n    });\n    /* Since we are handling location updates here, this would be a good place\r\n    to check the win condition for the player/hunter. If the player currently\r\n    has the treasure and steps into the grand foyer, then they win the game. Let\r\n    the server know this with a 'player_wins' action. */\n\n    if (this.state.hasTreasure && next_location == \"Grand Foyer\") {\n      this.clientHelper.sendMessage(JSON.stringify({\n        action: \"player_wins\",\n        clientID: this.state.clientID\n      }));\n      console.log(\"Player wins!\");\n    } // send a payload with updated location to local test server\n\n\n    this.clientHelper.sendMessage(JSON.stringify({\n      action: \"update_location\",\n      location: next_location,\n      clientID: this.state.clientID,\n      similarClients: this.state.similarClients\n    }));\n  } // When the client helper receives a new message, this function will be run\n\n\n  wsClientNewMessageReceivedHandler(message) {\n    console.log(message);\n    let jsonPayload = JSON.parse(message);\n    /* This set of conditionals monitors messages from the WS server. Each message\r\n    will usually contain an 'action' property indicating what action what completed\r\n    on the server side. The following conditionals help decide what changes should\r\n    happen on the client-side based on what happened on the server side. */\n\n    if (jsonPayload.action == \"create_room_successful\") {\n      // new room created\n      this.setState({ ...this.state,\n        roomID: jsonPayload.roomID,\n        gameOwner: true,\n        // the creator of the room is the owner\n        userInterface: \"roomScreen\"\n      });\n      console.log(`Client State: ${JSON.stringify(this.state)}`);\n    } // client joined an active room successfully\n    else if (jsonPayload.action == \"join_room_successful\") {\n        this.setState({ ...this.state,\n          roomID: jsonPayload.roomID,\n          gameOwner: false,\n          userInterface: \"roomScreen\",\n          similarClients: jsonPayload.similarClients\n        });\n        console.log(`Client ${this.state.clientID} has joined room ${this.state.roomID}.`);\n      } // alerts all similar clients that a new player has joined the room\n      else if (jsonPayload.action == \"new_client_joined_room\") {\n          this.setState({ ...this.state,\n            similarClients: this.state.similarClients.concat(jsonPayload.similarClientID)\n          });\n          console.log(`Similar client ${jsonPayload.similarClientID} has joined room.`);\n        } //client has connected to server and client ID has been created\n        else if (jsonPayload.action == \"client_id_and_ws_connection_created\") {\n            this.setState({ ...this.state,\n              clientID: jsonPayload.clientID\n            });\n            console.log(`New Client, ${jsonPayload.clientID}, created`);\n          } else if (jsonPayload.action == \"game_started\") {\n            this.setState({ ...this.state,\n              userInterface: \"gameScreen\",\n              role: jsonPayload.role\n            });\n            console.log(`Game has started. You have been assigned the role of ${jsonPayload.role}`);\n          } else if (jsonPayload.action == \"game_started\") {\n            this.setState({ ...this.state,\n              userInterface: \"gameScreen\",\n              role: jsonPayload.role\n            });\n            console.log(`Players can now move around the mansion!`);\n          } else if (jsonPayload.action == \"allow_player_movement\") {\n            this.treasureHidingSpot = jsonPayload.searchable;\n            this.setState({ ...this.state,\n              playing: true\n            });\n            console.log(\"Player is now allowed to move around the mansion.\");\n          } else if (jsonPayload.action == \"killed_by_ghoul\") {\n            this.setState({ ...this.state,\n              dead: true\n            });\n          } else if (jsonPayload.action == \"game_over_player_wins\") {\n            this.setState({ ...this.state,\n              userInterface: \"gameOverScreen\",\n              playerWon: jsonPayload.isWinner\n            });\n          } else if (jsonPayload.action == \"game_over_ghoul_wins\") {\n            this.setState({ ...this.state,\n              userInterface: \"gameOverScreen\",\n              playerWon: jsonPayload.isWinner\n            });\n          } else if (jsonPayload.action == \"player_quit\") {\n            // remove clientID that quit from similar clients array\n            let newSimilarClients = this.state.similarClients;\n            let removalIndex = newSimilarClients.indexOf(jsonPayload.quitterID);\n\n            if (removalIndex != -1) {\n              newSimilarClients.splice(removalIndex, 1);\n            }\n\n            this.setState({ ...this.state,\n              similarClients: newSimilarClients\n            });\n          }\n  }\n  /* Returns JSX code corresponding to the screen/UI that the user should currently\r\n  be seeing on their screens. This will be run everytime the Game component is\r\n  re-rendered or when the Game's state changes. */\n\n\n  getCurrentUI() {\n    if (this.state.userInterface == \"startScreen\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(StartScreen, {\n        gameState: this.state,\n        clientHelper: this.clientHelper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }\n      }));\n    } else if (this.state.userInterface == \"roomScreen\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(RoomScreen, {\n        gameState: this.state,\n        clientHelper: this.clientHelper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }\n      }));\n    } else if (this.state.userInterface == \"gameScreen\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(GameScreen, {\n        gameState: this.state,\n        clientHelper: this.clientHelper,\n        updateLocationCallback: this.updateLocation,\n        treasureHidingSpot: this.treasureHidingSpot,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }\n      }));\n    } else if (this.state.userInterface == \"gameOverScreen\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(GameOverScreen, {\n        gameState: this.state,\n        clientHelper: this.clientHelper,\n        handlePlayAgainButtonClicked: this.handlePlayAgainButtonClicked,\n        handleQuitButtonClicked: this.handleQuitButtonClicked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n\n  handlePlayAgainButtonClicked() {\n    // reset things on the client side\n    this.setState({ ...this.state,\n      location: this.locationHelper.getStartingLocation(),\n      userInterface: \"roomScreen\",\n      //similarClients: [] server needs to check if anyone left\n      role: null,\n      playing: false,\n      dead: false,\n      hasTreasure: false,\n      playerWon: false\n    }); // tell the server to reset settings for client\n\n    this.clientHelper.sendMessage(JSON.stringify({\n      clientID: this.state.clientID,\n      action: 'play_again'\n    }));\n  } // reset things on the client side\n\n\n  handleQuitButtonClicked() {\n    this.setState({ ...this.state,\n      location: this.locationHelper.getStartingLocation(),\n      roomID: null,\n      userInterface: \"startScreen\",\n      gameOwner: false,\n      role: null,\n      playing: false,\n      dead: false,\n      hasTreasure: false,\n      playerWon: false\n    }); // tell the server to reset settings for client\n\n    this.clientHelper.sendMessage(JSON.stringify({\n      clientID: this.state.clientID,\n      action: 'quit_game'\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["D:/MyProgramming/ghoul_hunters/Alexa_Skill-Ghoul_Hunters/src/Game.js"],"names":["React","Location","Client","StartScreen","RoomScreen","GameScreen","GameOverScreen","uniqid","require","http_post_payload","Game","Component","constructor","props","locationHelper","clientHelper","treasureHidingSpot","state","location","getStartingLocation","clientID","roomID","gameOwner","userInterface","similarClients","role","playing","dead","hasTreasure","playerWon","updateLocation","bind","wsClientNewMessageReceivedHandler","getCurrentUI","handlePlayAgainButtonClicked","handleQuitButtonClicked","render","e","next_location","getNextLocation","target","id","setState","sendMessage","JSON","stringify","action","console","log","message","jsonPayload","parse","concat","similarClientID","searchable","isWinner","newSimilarClients","removalIndex","indexOf","quitterID","splice"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Location from './Location.js';\r\nimport Client from './Client.js';\r\nimport StartScreen from './StartScreen.js';\r\nimport RoomScreen from './RoomScreen.js';\r\nimport GameScreen from './GameScreen.js';\r\nimport GameOverScreen from './GameOverScreen.js';\r\n\r\nconst uniqid = require('uniqid');\r\n\r\n// init to null so a variable doesn't have to be created for every new post request\r\nlet http_post_payload = null;\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.locationHelper = new Location();\r\n    this.clientHelper = new Client(\"ws://localhost:8080\", this);\r\n    this.treasureHidingSpot = \" \";\r\n\r\n    this.state = {\r\n      location: this.locationHelper.getStartingLocation(), // user's current location within the mansion\r\n      clientID: null, // each client will have a unique id created on the server side\r\n      roomID: null, // the game room that the client is currently in\r\n      gameOwner: null, // whether or not the client owns the game room\r\n      userInterface: \"startScreen\", // state variable to keep track of what UI user sees,\r\n      similarClients: [], // other clients that are in the same room as this client,\r\n      role: null,\r\n      playing: false, // player can move around the mansion\r\n      dead: false, // player has been killed by the ghoul in the game,\r\n      hasTreasure: false, // is the player currently holding the treasure\r\n      playerWon: false // tells gameOverScreen if player won the game\r\n    };\r\n\r\n    this.updateLocation = this.updateLocation.bind(this);\r\n    this.wsClientNewMessageReceivedHandler = this.wsClientNewMessageReceivedHandler.bind(this);\r\n    this.getCurrentUI = this.getCurrentUI.bind(this);\r\n    this.handlePlayAgainButtonClicked = this.handlePlayAgainButtonClicked.bind(this);\r\n    this.handleQuitButtonClicked = this.handleQuitButtonClicked.bind(this);\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    // renders the screen that the client should currently be seeing\r\n    return (\r\n        <div>\r\n          {this.getCurrentUI()}\r\n        </div>\r\n    );\r\n  }\r\n\r\n  //ONCLICK: Update the current location in the state when the button is clicked\r\n  updateLocation(e) {\r\n\r\n    // cache the next location\r\n    //e.target.id == {NavN, NavE, NavS, NavW} - gets converted to an int in Location class\r\n    let next_location = this.locationHelper.getNextLocation(e.target.id);\r\n\r\n    // change the location of the client\r\n    this.setState({\r\n      ...this.state,\r\n      location: next_location\r\n    });\r\n\r\n\r\n    /* Since we are handling location updates here, this would be a good place\r\n    to check the win condition for the player/hunter. If the player currently\r\n    has the treasure and steps into the grand foyer, then they win the game. Let\r\n    the server know this with a 'player_wins' action. */\r\n    if (this.state.hasTreasure && next_location == \"Grand Foyer\") {\r\n\r\n      this.clientHelper.sendMessage(JSON.stringify({\r\n        action: \"player_wins\",\r\n        clientID: this.state.clientID\r\n      }));\r\n\r\n      console.log(\"Player wins!\");\r\n    }\r\n\r\n    // send a payload with updated location to local test server\r\n    this.clientHelper.sendMessage(JSON.stringify({\r\n      action: \"update_location\",\r\n      location: next_location,\r\n      clientID: this.state.clientID,\r\n      similarClients: this.state.similarClients\r\n    }));\r\n  }\r\n\r\n  // When the client helper receives a new message, this function will be run\r\n  wsClientNewMessageReceivedHandler(message) {\r\n    console.log(message);\r\n\r\n    let jsonPayload = JSON.parse(message);\r\n\r\n    /* This set of conditionals monitors messages from the WS server. Each message\r\n    will usually contain an 'action' property indicating what action what completed\r\n    on the server side. The following conditionals help decide what changes should\r\n    happen on the client-side based on what happened on the server side. */\r\n    if (jsonPayload.action == \"create_room_successful\") { // new room created\r\n\r\n      this.setState({\r\n          ...this.state,\r\n          roomID: jsonPayload.roomID,\r\n          gameOwner: true, // the creator of the room is the owner\r\n          userInterface: \"roomScreen\"\r\n        });\r\n\r\n      console.log(`Client State: ${JSON.stringify(this.state)}`);\r\n    }\r\n\r\n    // client joined an active room successfully\r\n    else if(jsonPayload.action == \"join_room_successful\") {\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        roomID: jsonPayload.roomID,\r\n        gameOwner: false,\r\n        userInterface: \"roomScreen\",\r\n        similarClients: jsonPayload.similarClients\r\n      });\r\n\r\n      console.log(`Client ${this.state.clientID} has joined room ${this.state.roomID}.`);\r\n    }\r\n\r\n    // alerts all similar clients that a new player has joined the room\r\n    else if(jsonPayload.action == \"new_client_joined_room\") {\r\n\r\n      this.setState({\r\n          ...this.state,\r\n          similarClients: this.state.similarClients.concat(jsonPayload.similarClientID)\r\n      });\r\n\r\n      console.log(`Similar client ${jsonPayload.similarClientID} has joined room.`);\r\n    }\r\n\r\n    //client has connected to server and client ID has been created\r\n    else if(jsonPayload.action == \"client_id_and_ws_connection_created\") {\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        clientID: jsonPayload.clientID\r\n      });\r\n\r\n      console.log(`New Client, ${jsonPayload.clientID}, created`);\r\n    }\r\n\r\n    else if (jsonPayload.action == \"game_started\") {\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        userInterface: \"gameScreen\",\r\n        role: jsonPayload.role\r\n      });\r\n\r\n      console.log(`Game has started. You have been assigned the role of ${jsonPayload.role}`);\r\n    }\r\n\r\n\r\n    else if (jsonPayload.action == \"game_started\") {\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        userInterface: \"gameScreen\",\r\n        role: jsonPayload.role\r\n      });\r\n\r\n      console.log(`Players can now move around the mansion!`);\r\n    }\r\n\r\n    else if (jsonPayload.action == \"allow_player_movement\") {\r\n\r\n      this.treasureHidingSpot = jsonPayload.searchable;\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        playing: true\r\n      });\r\n\r\n      console.log(\"Player is now allowed to move around the mansion.\");\r\n\r\n    }\r\n\r\n    else if (jsonPayload.action == \"killed_by_ghoul\") {\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        dead: true\r\n      });\r\n    }\r\n\r\n\r\n    else if (jsonPayload.action == \"game_over_player_wins\") {\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        userInterface: \"gameOverScreen\",\r\n        playerWon: jsonPayload.isWinner\r\n      });\r\n    }\r\n\r\n    else if (jsonPayload.action == \"game_over_ghoul_wins\") {\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        userInterface: \"gameOverScreen\",\r\n        playerWon: jsonPayload.isWinner\r\n      });\r\n    }\r\n\r\n    else if (jsonPayload.action == \"player_quit\") {\r\n\r\n      // remove clientID that quit from similar clients array\r\n      let newSimilarClients = this.state.similarClients;\r\n      let removalIndex = newSimilarClients.indexOf(jsonPayload.quitterID);\r\n      if (removalIndex != -1) {\r\n        newSimilarClients.splice(removalIndex, 1);\r\n      }\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        similarClients: newSimilarClients\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /* Returns JSX code corresponding to the screen/UI that the user should currently\r\n  be seeing on their screens. This will be run everytime the Game component is\r\n  re-rendered or when the Game's state changes. */\r\n  getCurrentUI() {\r\n\r\n    if (this.state.userInterface == \"startScreen\") {\r\n      return (\r\n        <div>\r\n          <StartScreen gameState={this.state} clientHelper={this.clientHelper}/>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else if (this.state.userInterface == \"roomScreen\") {\r\n      return (\r\n        <div>\r\n          <RoomScreen gameState={this.state} clientHelper={this.clientHelper}/>\r\n        </div>\r\n      );\r\n    }\r\n    else if(this.state.userInterface == \"gameScreen\") {\r\n      return (\r\n        <div>\r\n          <GameScreen gameState={this.state} clientHelper={this.clientHelper} updateLocationCallback={this.updateLocation} treasureHidingSpot={this.treasureHidingSpot}/>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else if(this.state.userInterface == \"gameOverScreen\") {\r\n      return (\r\n        <div>\r\n          <GameOverScreen\r\n            gameState={this.state}\r\n            clientHelper={this.clientHelper}\r\n            handlePlayAgainButtonClicked={this.handlePlayAgainButtonClicked}\r\n            handleQuitButtonClicked={this.handleQuitButtonClicked} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  handlePlayAgainButtonClicked() {\r\n\r\n    // reset things on the client side\r\n    this.setState({\r\n      ...this.state,\r\n      location: this.locationHelper.getStartingLocation(),\r\n      userInterface: \"roomScreen\",\r\n      //similarClients: [] server needs to check if anyone left\r\n      role: null,\r\n      playing: false,\r\n      dead: false,\r\n      hasTreasure: false,\r\n      playerWon: false\r\n    });\r\n\r\n    // tell the server to reset settings for client\r\n    this.clientHelper.sendMessage(JSON.stringify({\r\n      clientID: this.state.clientID,\r\n      action: 'play_again'\r\n    }));\r\n  }\r\n\r\n  // reset things on the client side\r\n  handleQuitButtonClicked() {\r\n    this.setState({\r\n      ...this.state,\r\n      location: this.locationHelper.getStartingLocation(),\r\n      roomID: null,\r\n      userInterface: \"startScreen\",\r\n      gameOwner: false,\r\n      role: null,\r\n      playing: false,\r\n      dead: false,\r\n      hasTreasure: false,\r\n      playerWon: false\r\n    });\r\n\r\n    // tell the server to reset settings for client\r\n    this.clientHelper.sendMessage(JSON.stringify({\r\n      clientID: this.state.clientID,\r\n      action: 'quit_game'\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}