{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyProgramming\\\\ghoul_hunters\\\\Alexa_Skill-Ghoul_Hunters\\\\src\\\\RoomScreen.js\";\nimport React from 'react';\n\nclass RoomScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.similarClientListItems = []; // holds the <li> HTML elements for each similar client\n  }\n\n  render() {\n    // update the list elements array each time a new client joins the room\n    this.renderSimilarClients();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }, \"Room Code: \", this.props.gameState.roomID), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }, \"Players:\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      key: this.props.gameState.clientID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }\n    }, \"You: \", this.props.gameState.clientID), this.similarClientListItems), this.renderStartButton());\n  } // Generate an array filled with a <li> element for each similar client\n\n\n  renderSimilarClients() {\n    let finalListArray = [];\n    /* React needs arrays of JSX elements to each have a unique key. In this case,\r\n    I just make the clientID the unique key. I believe the function fails if the\r\n    similarClients array length is 0, so I put a conditional protection before\r\n    the array generation. */\n\n    if (this.props.gameState.similarClients.length > 0) {\n      for (let clientID of this.props.gameState.similarClients) {\n        finalListArray.push( /*#__PURE__*/React.createElement(\"li\", {\n          key: clientID,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 33\n          }\n        }, clientID));\n      }\n    }\n\n    this.similarClientListItems = finalListArray;\n  }\n\n  renderStartButton() {\n    if (this.props.gameState.gameOwner) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }\n      }, \"Start Game\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }\n      }, \"Waiting for owner to start game...\");\n    }\n  }\n\n}\n\nexport default RoomScreen;","map":{"version":3,"sources":["D:/MyProgramming/ghoul_hunters/Alexa_Skill-Ghoul_Hunters/src/RoomScreen.js"],"names":["React","RoomScreen","Component","constructor","props","similarClientListItems","render","renderSimilarClients","gameState","roomID","clientID","renderStartButton","finalListArray","similarClients","length","push","gameOwner"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAyC;AAEvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,sBAAL,GAA8B,EAA9B,CAFiB,CAEiB;AACnC;;AAEDC,EAAAA,MAAM,GAAG;AAEP;AACA,SAAKC,oBAAL;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgB,KAAKH,KAAL,CAAWI,SAAX,CAAqBC,MAArC,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,GAAG,EAAE,KAAKL,KAAL,CAAWI,SAAX,CAAqBE,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA8C,KAAKN,KAAL,CAAWI,SAAX,CAAqBE,QAAnE,CADF,EAEG,KAAKL,sBAFR,CAHF,EAOG,KAAKM,iBAAL,EAPH,CADF;AAWD,GAvBsC,CAyBvC;;;AACAJ,EAAAA,oBAAoB,GAAG;AAEnB,QAAIK,cAAc,GAAG,EAArB;AAEA;;;;;AAIA,QAAI,KAAKR,KAAL,CAAWI,SAAX,CAAqBK,cAArB,CAAoCC,MAApC,GAA6C,CAAjD,EAAoD;AAClD,WAAK,IAAIJ,QAAT,IAAqB,KAAKN,KAAL,CAAWI,SAAX,CAAqBK,cAA1C,EAA0D;AACtDD,QAAAA,cAAc,CAACG,IAAf,eAAoB;AAAI,UAAA,GAAG,EAAEL,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAoBA,QAApB,CAApB;AACH;AACF;;AAED,SAAKL,sBAAL,GAA8BO,cAA9B;AACH;;AAEDD,EAAAA,iBAAiB,GAAG;AAClB,QAAG,KAAKP,KAAL,CAAWI,SAAX,CAAqBQ,SAAxB,EAAmC;AACjC,0BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAR;AACD,KAFD,MAGK;AACH,0BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAR;AACD;AACF;;AAlDsC;;AAqDzC,eAAef,UAAf","sourcesContent":["import React from 'react';\r\n\r\nclass RoomScreen extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.similarClientListItems = []; // holds the <li> HTML elements for each similar client\r\n  }\r\n\r\n  render() {\r\n\r\n    // update the list elements array each time a new client joins the room\r\n    this.renderSimilarClients();\r\n\r\n    return (\r\n      <div>\r\n        <h1>Room Code: {this.props.gameState.roomID}</h1>\r\n        <h2>Players:</h2>\r\n        <ul>\r\n          <li key={this.props.gameState.clientID}>You: {this.props.gameState.clientID}</li>\r\n          {this.similarClientListItems}\r\n        </ul>\r\n        {this.renderStartButton()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Generate an array filled with a <li> element for each similar client\r\n  renderSimilarClients() {\r\n\r\n      let finalListArray = [];\r\n\r\n      /* React needs arrays of JSX elements to each have a unique key. In this case,\r\n      I just make the clientID the unique key. I believe the function fails if the\r\n      similarClients array length is 0, so I put a conditional protection before\r\n      the array generation. */\r\n      if (this.props.gameState.similarClients.length > 0) {\r\n        for (let clientID of this.props.gameState.similarClients) {\r\n            finalListArray.push(<li key={clientID}>{clientID}</li>);\r\n        }\r\n      }\r\n\r\n      this.similarClientListItems = finalListArray;\r\n  }\r\n\r\n  renderStartButton() {\r\n    if(this.props.gameState.gameOwner) {\r\n      return (<button>Start Game</button>);\r\n    }\r\n    else {\r\n      return (<p>Waiting for owner to start game...</p>);\r\n    }\r\n  }\r\n}\r\n\r\nexport default RoomScreen;\r\n"]},"metadata":{},"sourceType":"module"}