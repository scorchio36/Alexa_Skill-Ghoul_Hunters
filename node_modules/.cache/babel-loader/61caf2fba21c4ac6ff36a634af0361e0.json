{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyProgramming\\\\ghoul_hunters\\\\Alexa_Skill-Ghoul_Hunters\\\\src\\\\Game.js\";\nimport React from 'react';\nimport Location from './Location.js';\nimport Client from './Client.js';\nimport StartScreen from './StartScreen.js';\n\nconst uniqid = require('uniqid'); // init to null so a variable doesn't have to be created for every new post request\n\n\nlet http_post_payload = null;\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.locationHelper = new Location();\n    this.clientHelper = new Client(\"ws://localhost:8080\");\n    this.state = {\n      location: this.locationHelper.getStartingLocation(),\n      clientID: uniqid()\n    };\n    this.updateLocation = this.updateLocation.bind(this);\n  } //ONCLICK: Update the current location in the state when the button is clicked\n\n\n  updateLocation(e) {\n    // cache the next location\n    let next_location = this.locationHelper.getNextLocation(e.target.id); //e.target.id == {NavN, NavE, NavS, NavW} - gets converted to an int in Location class\n\n    this.setState({\n      location: next_location\n    }); // Currently the payloads will only contain the next location of the player.\n\n    http_post_payload = JSON.stringify({\n      location: next_location\n    });\n    /* send a POST request payload with updated location to the local test server\r\n    whenever location is updated. */\n    //this.clientHelper.sendPOSTRequest(http_post_payload);\n\n    this.clientHelper.sendMessage(\"Whatup B\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, \"Location: \", this.state.location), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.updateLocation,\n      id: \"NavN\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, \" North \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.updateLocation,\n      id: \"NavE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, \" East \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.updateLocation,\n      id: \"NavS\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, \" South \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.updateLocation,\n      id: \"NavW\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, \" West \"));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["D:/MyProgramming/ghoul_hunters/Alexa_Skill-Ghoul_Hunters/src/Game.js"],"names":["React","Location","Client","StartScreen","uniqid","require","http_post_payload","Game","Component","constructor","props","locationHelper","clientHelper","state","location","getStartingLocation","clientID","updateLocation","bind","e","next_location","getNextLocation","target","id","setState","JSON","stringify","sendMessage","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,C,CAEA;;;AACA,IAAIC,iBAAiB,GAAG,IAAxB;;AAEA,MAAMC,IAAN,SAAmBP,KAAK,CAACQ,SAAzB,CAAmC;AAEjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,cAAL,GAAsB,IAAIV,QAAJ,EAAtB;AACA,SAAKW,YAAL,GAAoB,IAAIV,MAAJ,CAAW,qBAAX,CAApB;AAEA,SAAKW,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,KAAKH,cAAL,CAAoBI,mBAApB,EADC;AAEXC,MAAAA,QAAQ,EAAEZ,MAAM;AAFL,KAAb;AAKA,SAAKa,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AAED,GAfgC,CAiBjC;;;AACAD,EAAAA,cAAc,CAACE,CAAD,EAAI;AAEhB;AACA,QAAIC,aAAa,GAAG,KAAKT,cAAL,CAAoBU,eAApB,CAAoCF,CAAC,CAACG,MAAF,CAASC,EAA7C,CAApB,CAHgB,CAKhB;;AACA,SAAKC,QAAL,CAAc;AACZV,MAAAA,QAAQ,EAAEM;AADE,KAAd,EANgB,CAUhB;;AACAd,IAAAA,iBAAiB,GAAGmB,IAAI,CAACC,SAAL,CAAe;AACjCZ,MAAAA,QAAQ,EAAEM;AADuB,KAAf,CAApB;AAIA;;AAEA;;AACA,SAAKR,YAAL,CAAkBe,WAAlB,CAA8B,UAA9B;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAEP,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAe,KAAKf,KAAL,CAAWC,QAA1B,CADF,eAEE;AAAQ,MAAA,OAAO,EAAE,KAAKG,cAAtB;AAAsC,MAAA,EAAE,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,KAAKA,cAAtB;AAAsC,MAAA,EAAE,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAQ,MAAA,OAAO,EAAE,KAAKA,cAAtB;AAAsC,MAAA,EAAE,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJF,eAKE;AAAQ,MAAA,OAAO,EAAE,KAAKA,cAAtB;AAAsC,MAAA,EAAE,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,CADJ;AAUD;;AAnDgC;;AAuDnC,eAAeV,IAAf","sourcesContent":["import React from 'react';\r\nimport Location from './Location.js';\r\nimport Client from './Client.js';\r\nimport StartScreen from './StartScreen.js';\r\n\r\nconst uniqid = require('uniqid');\r\n\r\n// init to null so a variable doesn't have to be created for every new post request\r\nlet http_post_payload = null;\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.locationHelper = new Location();\r\n    this.clientHelper = new Client(\"ws://localhost:8080\");\r\n\r\n    this.state = {\r\n      location: this.locationHelper.getStartingLocation(),\r\n      clientID: uniqid()\r\n    };\r\n\r\n    this.updateLocation = this.updateLocation.bind(this);\r\n\r\n  }\r\n\r\n  //ONCLICK: Update the current location in the state when the button is clicked\r\n  updateLocation(e) {\r\n\r\n    // cache the next location\r\n    let next_location = this.locationHelper.getNextLocation(e.target.id);\r\n\r\n    //e.target.id == {NavN, NavE, NavS, NavW} - gets converted to an int in Location class\r\n    this.setState({\r\n      location: next_location\r\n    });\r\n\r\n    // Currently the payloads will only contain the next location of the player.\r\n    http_post_payload = JSON.stringify({\r\n      location: next_location\r\n    });\r\n\r\n    /* send a POST request payload with updated location to the local test server\r\n    whenever location is updated. */\r\n    //this.clientHelper.sendPOSTRequest(http_post_payload);\r\n    this.clientHelper.sendMessage(\"Whatup B\");\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <div>\r\n          <h1>Location: {this.state.location}</h1>\r\n          <button onClick={this.updateLocation} id=\"NavN\"> North </button>\r\n          <button onClick={this.updateLocation} id=\"NavE\"> East </button>\r\n          <button onClick={this.updateLocation} id=\"NavS\"> South </button>\r\n          <button onClick={this.updateLocation} id=\"NavW\"> West </button>\r\n          {/*<!--- <StartScreen gameState={this.state}/> --> */}\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}