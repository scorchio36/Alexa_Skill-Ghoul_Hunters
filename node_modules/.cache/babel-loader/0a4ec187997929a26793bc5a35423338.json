{"ast":null,"code":"const http = require('http');\n\nconst WebSocket = require('isomorphic-ws'); //isomorphic-ws must be used for WS to work in node/browser\n\n\nconst SERVER_PORT = 8080;\nlet msgRcvdCallback = null;\n/* Helper class used to talk to the test server (and eventually the real server).\r\n  This client helper class forms a websockets connection with the test server\r\n  upon creation of the helper class. Messages can be sent once the connection is\r\n  established with the sendMessage function */\n\nclass Client {\n  constructor(hostname, messageReceivedCallback) {\n    /* messageReceivedCallback is a function that will be called by the user class\r\n    whenever the client helper receives a WS message.*/\n    this.wsClient = new WebSocket(hostname);\n    /* store the reference to the listener provided by GameComponent so that\r\n    it can be called later. I would use the this keyword to just store this\r\n    callback in a local variable, but I was getting an error, so this is a\r\n    workaround for now, since I am short on time.*/\n\n    msgRcvdCallback = messageReceivedCallback; // Register WS state handlers with the WS client object\n\n    this.wsClient.onerror = this.handleWS_OnError;\n    this.wsClient.onopen = this.handleWS_onConnect;\n    this.wsClient.onmessage = this.handleWS_onMessage;\n    this.wsClient.onclose = this.handleWS_onClose;\n  } // send a WS message to the test server\n\n\n  sendMessage(message) {\n    this.wsClient.send(message);\n  }\n  /* ===== Websockets Handlers ===== */\n\n\n  handleWS_OnError(error) {\n    console.log(error);\n  }\n\n  handleWS_onConnect(connection) {\n    console.log(\"WS Client connected.\");\n  }\n\n  handleWS_onClose() {\n    console.log(\"WS Client disconnected.\");\n  }\n\n  handleWS_onMessage(message) {\n    msgRcvdCallback(message);\n  } // This function sends a generic HTTP GET request to my local test server\n  // Params to be added: path and query (object containing query params)\n\n\n  sendGETRequest() {\n    const options = {\n      hostname: 'localhost',\n      port: SERVER_PORT,\n      path: '/',\n      method: 'GET'\n    };\n    const clientGETReq = http.request(options, function (res) {\n      console.log(`STATUS CODE: ${res.statusCode}`);\n    });\n    clientGETReq.on('error', function (err) {\n      console.log('ERROR:' + err);\n    });\n    clientGETReq.end();\n  } // This function sends a generic HTTP POST request to my local test server\n\n\n  sendPOSTRequest(json_payload) {\n    const options = {\n      hostname: 'localhost',\n      port: 8080,\n      path: '/',\n      method: 'POST'\n    };\n    const clientPOSTReq = http.request(options, function (res) {\n      console.log(`STATUS CODE: ${res.statusCode}`);\n      res.on('data', function (data) {\n        process.stdout.write(data);\n      });\n    });\n    clientPOSTReq.write(json_payload);\n    clientPOSTReq.end();\n    clientPOSTReq.on('error', function (err) {\n      console.log('ERROR:' + err);\n    });\n  }\n\n}\n\nexport default Client;","map":{"version":3,"sources":["D:/MyProgramming/ghoul_hunters/Alexa_Skill-Ghoul_Hunters/src/Client.js"],"names":["http","require","WebSocket","SERVER_PORT","msgRcvdCallback","Client","constructor","hostname","messageReceivedCallback","wsClient","onerror","handleWS_OnError","onopen","handleWS_onConnect","onmessage","handleWS_onMessage","onclose","handleWS_onClose","sendMessage","message","send","error","console","log","connection","sendGETRequest","options","port","path","method","clientGETReq","request","res","statusCode","on","err","end","sendPOSTRequest","json_payload","clientPOSTReq","data","process","stdout","write"],"mappings":"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","sourcesContent":["const http = require('http');\r\nconst WebSocket = require('isomorphic-ws'); //isomorphic-ws must be used for WS to work in node/browser\r\nconst SERVER_PORT = 8080;\r\n\r\nlet msgRcvdCallback = null;\r\n\r\n/* Helper class used to talk to the test server (and eventually the real server).\r\n  This client helper class forms a websockets connection with the test server\r\n  upon creation of the helper class. Messages can be sent once the connection is\r\n  established with the sendMessage function */\r\nclass Client {\r\n\r\n\r\n\r\n  constructor(hostname, messageReceivedCallback) {\r\n    /* messageReceivedCallback is a function that will be called by the user class\r\n    whenever the client helper receives a WS message.*/\r\n    this.wsClient = new WebSocket(hostname);\r\n    /* store the reference to the listener provided by GameComponent so that\r\n    it can be called later. I would use the this keyword to just store this\r\n    callback in a local variable, but I was getting an error, so this is a\r\n    workaround for now, since I am short on time.*/\r\n    msgRcvdCallback = messageReceivedCallback;\r\n    // Register WS state handlers with the WS client object\r\n    this.wsClient.onerror = this.handleWS_OnError;\r\n    this.wsClient.onopen = this.handleWS_onConnect;\r\n    this.wsClient.onmessage = this.handleWS_onMessage;\r\n    this.wsClient.onclose = this.handleWS_onClose;\r\n  }\r\n\r\n  // send a WS message to the test server\r\n  sendMessage(message) {\r\n    this.wsClient.send(message);\r\n  }\r\n\r\n  /* ===== Websockets Handlers ===== */\r\n  handleWS_OnError(error) {\r\n    console.log(error);\r\n  }\r\n\r\n  handleWS_onConnect(connection) {\r\n    console.log(\"WS Client connected.\");\r\n  }\r\n\r\n  handleWS_onClose() {\r\n    console.log(\"WS Client disconnected.\");\r\n  }\r\n\r\n  handleWS_onMessage(message) {\r\n    msgRcvdCallback(message);\r\n  }\r\n\r\n  // This function sends a generic HTTP GET request to my local test server\r\n  // Params to be added: path and query (object containing query params)\r\n  sendGETRequest() {\r\n\r\n    const options = {\r\n      hostname: 'localhost',\r\n      port: SERVER_PORT,\r\n      path: '/',\r\n      method: 'GET'\r\n    };\r\n\r\n    const clientGETReq = http.request(options, function(res) {\r\n\r\n      console.log(`STATUS CODE: ${res.statusCode}`);\r\n\r\n    });\r\n\r\n    clientGETReq.on('error', function(err) {\r\n      console.log('ERROR:' + err);\r\n    });\r\n\r\n    clientGETReq.end();\r\n\r\n  }\r\n\r\n  // This function sends a generic HTTP POST request to my local test server\r\n  sendPOSTRequest(json_payload) {\r\n\r\n    const options = {\r\n      hostname: 'localhost',\r\n      port: 8080,\r\n      path: '/',\r\n      method: 'POST',\r\n\r\n    };\r\n\r\n    const clientPOSTReq = http.request(options, function(res) {\r\n\r\n      console.log(`STATUS CODE: ${res.statusCode}`);\r\n\r\n      res.on('data', function(data) {\r\n\r\n        process.stdout.write(data);\r\n      });\r\n\r\n    });\r\n\r\n    clientPOSTReq.write(json_payload);\r\n    clientPOSTReq.end();\r\n\r\n    clientPOSTReq.on('error', function(err) {\r\n      console.log('ERROR:' + err);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Client;\r\n"]},"metadata":{},"sourceType":"module"}