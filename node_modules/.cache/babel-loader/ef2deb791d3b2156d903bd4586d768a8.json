{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyProgramming\\\\ghoul_hunters\\\\Alexa_Skill-Ghoul_Hunters\\\\src\\\\Game.js\";\nimport React from 'react';\nimport Location from './Location.js';\nimport Client from './Client.js';\nimport StartScreen from './StartScreen.js';\nimport RoomScreen from './RoomScreen.js';\n\nconst uniqid = require('uniqid'); // init to null so a variable doesn't have to be created for every new post request\n\n\nlet http_post_payload = null;\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.locationHelper = new Location();\n    this.clientHelper = new Client(\"ws://localhost:8080\", this);\n    this.state = {\n      location: this.locationHelper.getStartingLocation(),\n      // user's current location within the mansion\n      clientID: uniqid(),\n      // each client will have a unique id\n      roomID: null,\n      // the game room that the client is currently in\n      gameOwner: null,\n      // whether or not the client owns the game room\n      userInterface: \"startScreen\" // state variable to keep track of what UI user sees\n\n    };\n    this.updateLocation = this.updateLocation.bind(this);\n    this.wsClientNewMessageReceivedHandler = this.wsClientNewMessageReceivedHandler.bind(this);\n    this.getCurrentUI = this.getCurrentUI.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, this.getCurrentUI());\n  } //ONCLICK: Update the current location in the state when the button is clicked\n\n\n  updateLocation(e) {\n    // cache the next location\n    let next_location = this.locationHelper.getNextLocation(e.target.id); //e.target.id == {NavN, NavE, NavS, NavW} - gets converted to an int in Location class\n\n    this.setState({ ...this.state,\n      location: next_location\n    }); // Currently the payloads will only contain the next location of the player.\n\n    http_post_payload = JSON.stringify({\n      location: next_location\n    }); // send a payload with updated location to local test server\n\n    this.clientHelper.sendMessage(http_post_payload);\n  } // When the client helper receives a new message, this function will be run\n\n\n  wsClientNewMessageReceivedHandler(message) {\n    console.log(message);\n    let jsonPayload = JSON.parse(message);\n\n    if (jsonPayload.action == \"create_room_successful\") {\n      this.setState({ ...this.state,\n        roomID: jsonPayload.roomID,\n        gameOwner: true,\n        userInterface: \"roomScreen\"\n      });\n      console.log(`Client State: ${JSON.stringify(this.state)}`);\n    }\n  }\n  /* Returns JSX code corresponding to the screen/UI that the user should currently\r\n  be seeing on their screens. This will be run everytime the Game component is\r\n  re-rendered or when the Game's state changes. */\n\n\n  getCurrentUI() {\n    if (this.state.userInterface == \"startScreen\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(StartScreen, {\n        gameState: this.state,\n        clientHelper: this.clientHelper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      }));\n    } else if (this.state.userInterface == \"roomScreen\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(RoomScreen, {\n        gameState: this.state,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }));\n    } else if (this.state.userInterface == \"playerScreen\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }\n      }, \"Location: \", this.state.location), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.updateLocation,\n        id: \"NavN\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }\n      }, \" North \"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.updateLocation,\n        id: \"NavE\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }, \" East \"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.updateLocation,\n        id: \"NavS\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }\n      }, \" South \"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.updateLocation,\n        id: \"NavW\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }\n      }, \" West \"));\n    } else if (this.state.userInterface == \"ghostScreen\") {}\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["D:/MyProgramming/ghoul_hunters/Alexa_Skill-Ghoul_Hunters/src/Game.js"],"names":["React","Location","Client","StartScreen","RoomScreen","uniqid","require","http_post_payload","Game","Component","constructor","props","locationHelper","clientHelper","state","location","getStartingLocation","clientID","roomID","gameOwner","userInterface","updateLocation","bind","wsClientNewMessageReceivedHandler","getCurrentUI","render","e","next_location","getNextLocation","target","id","setState","JSON","stringify","sendMessage","message","console","log","jsonPayload","parse","action"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Location from './Location.js';\r\nimport Client from './Client.js';\r\nimport StartScreen from './StartScreen.js';\r\nimport RoomScreen from './RoomScreen.js';\r\n\r\nconst uniqid = require('uniqid');\r\n\r\n// init to null so a variable doesn't have to be created for every new post request\r\nlet http_post_payload = null;\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.locationHelper = new Location();\r\n    this.clientHelper = new Client(\"ws://localhost:8080\", this);\r\n\r\n    this.state = {\r\n      location: this.locationHelper.getStartingLocation(), // user's current location within the mansion\r\n      clientID: uniqid(), // each client will have a unique id\r\n      roomID: null, // the game room that the client is currently in\r\n      gameOwner: null, // whether or not the client owns the game room\r\n      userInterface: \"startScreen\" // state variable to keep track of what UI user sees\r\n    };\r\n\r\n    this.updateLocation = this.updateLocation.bind(this);\r\n    this.wsClientNewMessageReceivedHandler = this.wsClientNewMessageReceivedHandler.bind(this);\r\n    this.getCurrentUI = this.getCurrentUI.bind(this);\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <div>\r\n          {this.getCurrentUI()}\r\n        </div>\r\n    );\r\n  }\r\n\r\n  //ONCLICK: Update the current location in the state when the button is clicked\r\n  updateLocation(e) {\r\n\r\n    // cache the next location\r\n    let next_location = this.locationHelper.getNextLocation(e.target.id);\r\n\r\n    //e.target.id == {NavN, NavE, NavS, NavW} - gets converted to an int in Location class\r\n    this.setState({\r\n      ...this.state,\r\n      location: next_location\r\n    });\r\n\r\n    // Currently the payloads will only contain the next location of the player.\r\n    http_post_payload = JSON.stringify({\r\n      location: next_location\r\n    });\r\n\r\n    // send a payload with updated location to local test server\r\n    this.clientHelper.sendMessage(http_post_payload);\r\n  }\r\n\r\n  // When the client helper receives a new message, this function will be run\r\n  wsClientNewMessageReceivedHandler(message) {\r\n    console.log(message);\r\n\r\n    let jsonPayload = JSON.parse(message);\r\n\r\n    if (jsonPayload.action == \"create_room_successful\") {\r\n\r\n      this.setState({\r\n          ...this.state,\r\n          roomID: jsonPayload.roomID,\r\n          gameOwner: true,\r\n          userInterface: \"roomScreen\"\r\n        });\r\n\r\n      console.log(`Client State: ${JSON.stringify(this.state)}`);\r\n    }\r\n  }\r\n\r\n\r\n  /* Returns JSX code corresponding to the screen/UI that the user should currently\r\n  be seeing on their screens. This will be run everytime the Game component is\r\n  re-rendered or when the Game's state changes. */\r\n  getCurrentUI() {\r\n\r\n    if (this.state.userInterface == \"startScreen\") {\r\n      return (\r\n        <div>\r\n          <StartScreen gameState={this.state} clientHelper={this.clientHelper}/>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else if (this.state.userInterface == \"roomScreen\") {\r\n      return (\r\n        <div>\r\n          <RoomScreen gameState={this.state} />\r\n        </div>\r\n      );\r\n    }\r\n    else if(this.state.userInterface == \"playerScreen\") {\r\n      return (\r\n        <div>\r\n          <h1>Location: {this.state.location}</h1>\r\n          <button onClick={this.updateLocation} id=\"NavN\"> North </button>\r\n          <button onClick={this.updateLocation} id=\"NavE\"> East </button>\r\n          <button onClick={this.updateLocation} id=\"NavS\"> South </button>\r\n          <button onClick={this.updateLocation} id=\"NavW\"> West </button>\r\n        </div>\r\n      );\r\n    }\r\n    else if(this.state.userInterface == \"ghostScreen\") {\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}